--- dicom_io.py
+++ dicom_io.py
@@ -40,50 +40,6 @@ __all__ = ["DicomReader", "DicomWriter"]
 TOTAL_NUM_ECHOS_KEY = (0x19, 0x107E)
 
 
-def flatten_data(d, new_dataset=None):
-    if new_dataset is None:
-        new_dataset = pydicom.Dataset()
-        new_dataset.is_little_endian = d.is_little_endian
-        new_dataset.is_implicit_VR = d.is_implicit_VR
-        new_dataset.file_meta = copy.deepcopy(d.file_meta)
-        new_dataset.file_meta.MediaStorageSOPClassUID = '1.2.840.10008.5.1.4.1.1.4' # non-enhanced ClassUID
-        new_dataset.ensure_file_meta()
-    for element in d.iterall():
-        if not isinstance(element.value, pydicom.sequence.Sequence):
-            new_dataset.add(element)
-    return new_dataset
-
-
-def separate_enhanced_slices(data_in):
-    d = copy.copy(data_in)
-    slice_data = d[(0x5200, 0x9230)]
-    d.pop((0x5200, 0x9230))
-
-    try:
-        d.decompress()
-    except:
-        pass
-
-    pixel_data = d.pixel_array.astype(np.uint16)
-
-    if pixel_data.ndim > 2:
-        pixel_data = pixel_data.transpose([1, 2, 0])
-    else:
-        pixel_data = np.expand_dims(pixel_data, -1)
-
-    d.pop((0x7fe0, 0x0010))
-    header_list = []
-    current_slice = 0
-    for slice_header in slice_data:
-        new_slice_header = flatten_data(d)
-        flatten_data(slice_header, new_slice_header)
-        new_slice_header.NumberOfFrames = 1
-        new_slice_header.PixelData = pixel_data[:,:,current_slice].tostring()
-        header_list.append(new_slice_header)
-        current_slice += 1
-    return header_list
-
-
 class DicomReader(DataReader):
     """A class for reading DICOM files.
 
@@ -227,8 +183,7 @@ class DicomReader(DataReader):
             path (`str(s)`): Directory with dicom files or dicom file(s).
             group_by (:obj:`str(s)` or :obj:`int(s)`, optional): DICOM attribute(s) used
                 to group dicoms. This can be the attribute tag name (str) or tag
-                number (int). Defaults to ``self.group_by``. For Philips enhanced DICOM datasets, 
-                a good choice if the Frame ID: [(0x2005, 0x1011)]
+                number (int). Defaults to ``self.group_by``.
             sort_by (:obj:`str(s)` or :obj:`int(s)`, optional): DICOM attribute(s) used
                 to sort dicoms. This sorting is done after sorting files in alphabetical
                 order. Defaults to ``self.sort_by``.
@@ -281,11 +236,9 @@ class DicomReader(DataReader):
 
         # Check if dicom file has the group_by element specified
         temp_dicom = pydicom.read_file(lstFilesDCM[0], force=True)
-        
-        if not temp_dicom.file_meta[(2,2)].value == '1.2.840.10008.5.1.4.1.1.4.1': # Media Storage SOP Class UID == Enhanced MR Image Storage                
-            for _group in group_by:
-                if _group not in temp_dicom:
-                    raise KeyError("Tag {} does not exist in dicom".format(_group))
+        for _group in group_by:
+            if _group not in temp_dicom:
+                raise KeyError("Tag {} does not exist in dicom".format(_group))
 
         if self.num_workers:
             fn = functools.partial(pydicom.read_file, force=True)
@@ -300,20 +253,6 @@ class DicomReader(DataReader):
                 for fp in tqdm(lstFilesDCM, disable=not self.verbose)
             ]
 
-        # check if the dicom dataset is enhanced
-        new_dicom_slices = []
-        for dataset in dicom_slices:
-            if dataset.file_meta[(2,2)].value == '1.2.840.10008.5.1.4.1.1.4.1': # Media Storage SOP Class UID == Enhanced MR Image Storage
-                new_dicom_slices.extend(separate_enhanced_slices(dataset))
-                # check group_by again in case of enhanced dicom. One might check to do it once only but it's a very small performance penalty
-                for _group in group_by:
-                        if _group not in new_dicom_slices[0]:
-                            raise KeyError("Tag {} does not exist in dicom".format(_group))
-            else:
-                new_dicom_slices.append(dataset)
-        
-        dicom_slices = new_dicom_slices
-
         if sort_by:
             try:
                 dicom_slices = natsorted(
